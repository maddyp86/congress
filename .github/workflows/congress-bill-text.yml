name: Collect Congress Bill Text (118â€“119)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 9 * * *" # nightly (09:30 UTC)

concurrency:
  group: collect-congress-billtext
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  collect_billtext:
    runs-on: ubuntu-latest

    env:
      CONGRESSES: ${{ secrets.CONGRESSES || '118,119' }}
      GCS_BUCKET: ${{ secrets.GCS_BUCKET || 'congress-legislative-data' }}
      GCS_PREFIX: ${{ secrets.GCS_PREFIX || 'congress-billtext-data' }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install minimal deps & create venv
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq
          python -m venv env
          . env/bin/activate
          python -m pip install --upgrade pip
          pip install "git+https://github.com/unitedstates/congress.git"

      - name: Verify required env
        run: |
          set -euo pipefail
          : "${GCP_PROJECT:?Missing required secret GCP_PROJECT}"
          : "${GCS_BUCKET:?Missing required GCS_BUCKET}"

      - name: Ensure data directory
        run: mkdir -p data

      - name: Fetch GovInfo BILLS text & build billtext
        run: |
          set -euo pipefail
          . env/bin/activate
          IFS=',' read -ra CONS <<< "${CONGRESSES}"
          for C in "${CONS[@]}"; do
            C="$(echo "$C" | xargs)"
            echo "Fetching BILLS text for Congress $C"

            # Pass --bulkdata as a quoted string "False" to follow docs intent
            # while avoiding CI/parser conversion to boolean that caused the crash.
            usc-run govinfo --collections=BILLS --congress="$C" --store=mods,xml,text --bulkdata="False" \
              || { echo "::error:: usc-run govinfo failed for Congress $C"; exit 1; }
          done

          # build the billtext outputs
          usc-run billtext || { echo "::error:: usc-run billtext failed"; exit 1; }

      - name: Quick debug: counts & samples
        run: |
          set -euo pipefail
          echo "Total files under data/: $(find data -type f 2>/dev/null | wc -l || true)"
          echo "Total data.json under data/: $(find data -type f -name data.json 2>/dev/null | wc -l || true)"
          echo "Total data.json under text-versions: $(find data -type f -path '*/text-versions/*/data.json' 2>/dev/null | wc -l || true)"
          echo "Sample data.json (up to 100):"
          find data -type f -name data.json | sort | sed 's/^/  /' | head -n 100 || true

      - name: Build Latest Bill Text
        run: |
          set -euo pipefail
          . env/bin/activate
          if [ ! -f scripts/latest-bill-text.py ]; then
            echo "::error:: scripts/latest-bill-text.py not found; expected at scripts/latest-bill-text.py"
            exit 1
          fi
          python scripts/latest-bill-text.py

      - name: Build Manifests
        run: |
          set -euo pipefail
          . env/bin/activate
          if [ ! -f scripts/build_manifests.py ]; then
            echo "::error:: scripts/build_manifests.py not found; expected at scripts/build_manifests.py"
            exit 1
          fi
          python scripts/build_manifests.py

      - name: Debug latest_billtext
        run: |
          set -euo pipefail
          echo "latest_billtext exists?"; [ -d latest_billtext ] && echo "yes" || echo "no"
          echo "Count latest_billtext data.json files:"
          find latest_billtext -type f -name data.json | wc -l || true
          echo "Sample latest_billtext files (up to 200):"
          find latest_billtext -type f -name data.json | sed -n '1,200p' || true

      - name: Quick manifest count
        run: |
          set -euo pipefail
          if [ -f billtext-manifest.json ]; then
            echo "BillText files (manifest): $(jq '.files | length' billtext-manifest.json 2>/dev/null || echo 0)"
          else
            echo "BillText manifest not found"
          fi

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud (gsutil)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          version: '>= 472.0.0'

      - name: Ensure bucket exists
        run: |
          set -euo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null 2>&1 || gsutil mb -p "${GCP_PROJECT}" "gs://${GCS_BUCKET}"

      - name: Upload Bill Text to GCS (non-destructive)
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          TARGET_PREFIX="${PREFIX:+${PREFIX}/}data"
          if [ ! -d latest_billtext ]; then
            echo "::error:: latest_billtext not found; aborting upload"
            exit 1
          fi

          COUNT=$(find latest_billtext -type f -name data.json | wc -l || true)
          echo "latest_billtext data.json count: ${COUNT}"
          # Safety threshold: avoid accidental uploads when latest_billtext is empty or tiny.
          if [ "${COUNT}" -lt 10 ]; then
            echo "::error:: latest_billtext appears too small (${COUNT} files). Aborting upload to avoid accidental sync issues."
            exit 1
          fi

          echo "Non-destructive rsync: latest_billtext -> gs://${GCS_BUCKET}/${TARGET_PREFIX}/"
          gsutil -m rsync -r "latest_billtext" "gs://${GCS_BUCKET}/${TARGET_PREFIX}/"

      - name: Summary
        run: |
          set -euo pipefail
          COUNT_TEXT=$(find latest_billtext -type f -name data.json 2>/dev/null | wc -l || true)
          echo "Uploaded bucket: ${GCS_BUCKET}"
          echo "Prefix: ${GCS_PREFIX}"
          echo "latest billtext JSON count: ${COUNT_TEXT}"
