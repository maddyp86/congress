# .github/workflows/collect-billtext.yml
name: Collect Congress Bill Text (118â€“119)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 9 * * *" # nightly (09:30 UTC)
    - cron: "0 10 * * 0" # weekly (Sunday 10:00 UTC)

concurrency:
  group: collect-congress-billtext
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  collect_billtext:
    runs-on: ubuntu-latest

    env:
      CONGRESSES: ${{ secrets.CONGRESSES || '118,119' }}
      GCS_BUCKET: ${{ secrets.GCS_BUCKET || 'congress-legislative-data' }}
      GCS_PREFIX: ${{ secrets.GCS_PREFIX || 'congress-billtext-data' }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install System Libs
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y python3-venv jq zip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache Pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt', 'pyproject.toml', 'setup.cfg', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Congress Tool
        run: |
          set -euo pipefail
          python -m venv env
          . env/bin/activate
          python -m pip install --upgrade pip
          pip install "git+https://github.com/unitedstates/congress.git"

      - name: Verify Required Env
        run: |
          set -euo pipefail
          : "${GCP_PROJECT:?Missing required secret GCP_PROJECT}"
          : "${GCS_BUCKET:?Missing required GCS_BUCKET}"
      
      - name: Ensure Data Dir
        run: mkdir -p data

      - name: Fetch GovInfo BILLS Text
        run: |
          set -euo pipefail
          . env/bin/activate
          IFS=',' read -ra CONS <<< "${CONGRESSES}"
          for C in "${CONS[@]}"; do
            C="$(echo "$C" | xargs)"  # trim spaces
            echo "Fetching BILLS text for Congress $C"
            usc-run govinfo --collections=BILLS --congress="$C" --store=mods,xml,text --bulkdata=False
          done
          usc-run billtext

      - name: Quick Billtext Debug
        run: |
          set -euo pipefail
          echo "Bill text (text-version data.json) sample:"
          { find data -type f -path "*/bills/*/text-versions/*/data.json" | sort | sed 's/^/  /' | head -n 100; } 2>/dev/null || true

      - name: Build Latest Bill Text
        run: |
          set -euo pipefail
          . env/bin/activate
          python scripts/latest-bill-text.py

      - name: Build Manifests
        run: |
          set -euo pipefail
          . env/bin/activate
          python scripts/build_manifests.py

      - name: Quick Manifest Count
        run: |
          set -euo pipefail
          echo "BillText files: $(jq '.files | length' billtext-manifest.json || echo 0)"

      # --- GCP auth + upload (BILL TEXT ONLY) ---
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          version: '>= 472.0.0'

      - name: Ensure Bucket Exists
        run: |
          set -euo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null 2>&1 || gsutil mb -p "${GCP_PROJECT}" "gs://${GCS_BUCKET}"

      - name: Upload Bill Text to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          for C in data/*; do
            [ -d "$C/bills" ] || continue
            CONS=$(basename "$C")
            echo "Sync bills (incl. text-versions) for Congress ${CONS} -> gs://${GCS_BUCKET}/${PREFIX}/data/${CONS}/bills/"
            # no -d to avoid deleting bill metadata uploaded by the bills workflow
            gsutil -m rsync -r "$C/bills" "gs://${GCS_BUCKET}/${PREFIX}/data/${CONS}/bills"
          done

          if [ -d latest_billtext ]; then
            echo "Uploading latest_billtext -> gs://${GCS_BUCKET}/${PREFIX}/latest/billtext/"
            gsutil -m cp -r latest_billtext/* "gs://${GCS_BUCKET}/${PREFIX}/latest/billtext/"
          fi

          echo "Uploading billtext manifests -> gs://${GCS_BUCKET}/${PREFIX}/"
          gsutil cp billtext-manifest.json billtext-manifest-gcs.json "gs://${GCS_BUCKET}/${PREFIX}/" || true

      - name: Summary
        run: |
          set -euo pipefail
          COUNT_TEXT=$(jq '.files | length' billtext-manifest.json 2>/dev/null || echo 0)
          echo "Uploaded bucket: ${GCS_BUCKET}"
          echo "Prefix: ${GCS_PREFIX}"
          echo "BillText files (manifest): ${COUNT_TEXT}"
