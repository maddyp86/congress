name: Collect Congress Bill Text (118-119)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 9 * * *" # nightly (09:30 UTC)

concurrency:
  group: collect-congress-billtext
  cancel-in-progress: true

permissions:
  contents: read

env:
  # defaults; override via repo secrets if needed
  CONGRESSES: ${{ secrets.CONGRESSES || '118,119' }}
  GCS_BUCKET: ${{ secrets.GCS_BUCKET || 'congress-legislative-data' }}
  GCS_PREFIX: ${{ secrets.GCS_PREFIX || 'congress-billtext-data' }}
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

jobs:
  collect_billtext:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install system packages
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y python3-venv jq zip

      - name: Setup Python venv and install usc-run
        run: |
          set -euo pipefail
          python -V
          python -m pip install --upgrade pip
          python -m venv env
          ./env/bin/python -m pip install --upgrade pip
          # install the official CLI (usc-run) from unitedstates/congress
          ./env/bin/python -m pip install "git+https://github.com/unitedstates/congress.git"
          # Export the interpreter path for use in later steps
          echo "PYTHON=./env/bin/python" >> $GITHUB_ENV
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV

      - name: Ensure clean workspace dirs
        run: |
          set -euo pipefail
          mkdir -p data
          # we intentionally remove old latest_billtext so the script controls updates
          rm -rf latest_billtext || true

      - name: Fetch GOVInfo Bill Text
        run: |
          set -euo pipefail
          USC="./env/bin/usc-run"
          IFS=',' read -ra CONS <<< "${CONGRESSES}"
          for C in "${CONS[@]}"; do
            C="${C//[[:space:]]/}"
            [ -z "$C" ] && continue
            echo "=== Fetching BILLS text for Congress ${C} ==="
            # follow docs: include text; avoid the separate BILLS bulkdata collection
            $USC govinfo --collections=BILLS --congress="${C}" --store=mods,xml,text --bulkdata="False" \
              || { echo "::error:: usc-run govinfo failed for ${C}"; exit 1; }
          done

          echo "=== Running billtext processor (usc-run billtext) ==="
          $USC billtext || { echo "::error:: usc-run billtext failed"; exit 1; }

      - name: Unzip billtext packages
        run: |
          set -euo pipefail

          echo "== Ensure unzip is available =="
          sudo apt-get update -y
          sudo apt-get install -y unzip
          
          echo "Unzipping any package.zip files under data/ ..."
          find data -type f -name 'package.zip' -print0 | while IFS= read -r -d '' zipfile; do
            dir="$(dirname "$zipfile")"
            echo "Extracting: $zipfile -> $dir"
            # unzip -q will overwrite by default; -o ensures overwriting if present
            unzip -o "$zipfile" -d "$dir"
          done

          echo "Verification: counts and sample paths"
          echo "data.json count:"
          find data -type f -name data.json | wc -l
          echo "Some sample files:"
          find data -type f -path "*/bills/*/*/text-versions/*/*" | sed -n '1,30p'

      - name: Quick Debug
        run: |
          set -euo pipefail
          echo "Total data.json files under data/: $(find data -type f -name data.json | wc -l || true)"
          echo "Sample text-version data.json (data/*/bills/*/*/text-versions/*/data.json):"
          find data -type f -path "data/*/bills/*/*/text-versions/*/data.json" | sort | sed -n '1,100p' || true

      - name: Build Bill Text
        run: |
          set -euo pipefail
          echo "Running latest-bill-text via $PYTHON"
          # script MUST return non-zero if it picked 0 bills (safety)
          $PYTHON -u scripts/latest-bill-text.py

      - name: Debug Bill Text
        run: |
          set -euo pipefail
          echo "latest_billtext exists?"; [ -d latest_billtext ] && echo "yes" || echo "no"
          echo "latest_billtext data.json count:"; find latest_billtext -type f -name data.json | wc -l || true
          echo "Sample latest_billtext files (up to 200):"
          find latest_billtext -type f -name data.json | sort | sed -n '1,200p' || true

      - name: Build manifests
        run: |
          set -euo pipefail
          echo "Running build_manifests.py via $PYTHON"
          $PYTHON -u scripts/build_manifests.py

      - name: Manifest sanity checks
        run: |
          set -euo pipefail
          if [ ! -f billtext-manifest.json ]; then
            echo "::error:: billtext-manifest.json not found; aborting"
            exit 1
          fi
          BILLCOUNT=$(jq '.files | length' billtext-manifest.json 2>/dev/null || echo 0)
          echo "billtext-manifest.json contains ${BILLCOUNT} entries"
          if [ "${BILLCOUNT}" -lt 1 ]; then
            echo "::error:: billtext-manifest.json is empty; aborting upload (safety)"
            exit 1
          fi

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          version: '>= 472.0.0'

      - name: Ensure GCS bucket exists
        run: |
          set -euo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null 2>&1 || gsutil mb -p "${GCP_PROJECT}" "gs://${GCS_BUCKET}"

      - name: Upload Bill Text to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          TARGET_PREFIX="${PREFIX:+${PREFIX}/}data"
          echo "Uploading latest_billtext -> gs://${GCS_BUCKET}/${TARGET_PREFIX}/ (non-destructive rsync)"
          # we already checked manifest contains files; use rsync to copy whole tree non-destructively
          gsutil -m rsync -r "latest_billtext" "gs://${GCS_BUCKET}/${TARGET_PREFIX}/"

      - name: Upload manifests to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          echo "Uploading manifest files to gs://${GCS_BUCKET}/${PREFIX}/ (non-destructive, -n to avoid overwrites)"
          # -n prevents overwriting existing identical objects; manifest updates still copy if not present
          gsutil -m cp -n billtext-manifest.json billtext-manifest-gcs.json "gs://${GCS_BUCKET}/${PREFIX}/" || true

      - name: Summary
        run: |
          set -euo pipefail
          COUNT_TEXT=$(find latest_billtext -type f -name data.json 2>/dev/null | wc -l || echo 0)
          echo "Completed billtext run."
          echo "latest_billtext JSON count: ${COUNT_TEXT}"
          echo "Bucket: ${GCS_BUCKET}"
          echo "Prefix: ${GCS_PREFIX}"
