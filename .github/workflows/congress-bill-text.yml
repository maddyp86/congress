name: Collect Congress Bill Text (119)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 9 * * *" # nightly (09:30 UTC)

concurrency:
  group: collect-congress-billtext
  cancel-in-progress: true

permissions:
  contents: read

env:
  # defaults; override via repo secrets if needed
  CONGRESSES: ${{ secrets.CONGRESSES || '119' }}
  GCS_BUCKET: ${{ secrets.GCS_BUCKET || 'congress-legislative-data' }}
  GCS_PREFIX: ${{ secrets.GCS_PREFIX || 'congress-billtext-data' }}
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

jobs:
  collect_billtext:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt', '**/setup.cfg', '**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install System Libs
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y python3-venv jq zip unzip

      - name: Create venv & install Congress tool + local package
        env:
          PIP_CACHE_DIR: ${{ runner.temp }}/pip-cache
        run: |
          set -euo pipefail
          python -V
          python -m pip install --upgrade pip
          python -m venv env
          . env/bin/activate
          python -m pip install --upgrade pip
          # install the official CLI (usc-run) from unitedstates/congress
          python -m pip install "git+https://github.com/unitedstates/congress.git"
          # install local repository in editable mode so local modules (e.g., billtext) are importable
          python -m pip install -e .
          # export interpreter path for later steps
          echo "PYTHON=./env/bin/python" >> $GITHUB_ENV
          echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV

      - name: Verify required env
        run: |
          set -euo pipefail
          : "${GCP_PROJECT:?Missing required secret GCP_PROJECT}"
          : "${GCS_BUCKET:?Missing required GCS_BUCKET}"

      - name: Ensure data dir
        run: mkdir -p data

      - name: Fetch GOVInfo Bill Text
        run: |
          set -euo pipefail
          . env/bin/activate
          IFS=',' read -ra CONS <<< "${CONGRESSES}"
          for C in "${CONS[@]}"; do
            C="$(echo "$C" | xargs)"
            echo "Fetching BILLS text for Congress $C"
            # Pass --bulkdata as a quoted string "False" to follow docs intent
            # while avoiding CI/parser conversion to boolean that caused the crash.
            usc-run govinfo --collections=BILLS --congress="$C" --store=mods,xml,text --bulkdata="False" \
              || { echo "::error:: usc-run govinfo failed for Congress $C"; exit 1; }
          done
          # build the billtext outputs
          usc-run billtext || { echo "::error:: usc-run billtext failed"; exit 1; }

      - name: Unzip billtext packages
        run: |
          set -euo pipefail
          echo "Unzipping any package.zip files under data/ ..."
          found=0
          find data -type f -name 'package.zip' -print0 | while IFS= read -r -d '' zipfile; do
            found=1
            dir="$(dirname "$zipfile")"
            echo "Extracting: $zipfile -> $dir"
            if unzip -o "$zipfile" -d "$dir"; then
              echo "OK: $zipfile extracted"
            else
              echo "::warning:: Failed to extract $zipfile â€” continuing to next file"
            fi
          done
          if [ "$found" -eq 0 ]; then
            echo "No package.zip files found (this can be okay if upstream writes files directly)."
          fi

          echo "Verification: counts and sample paths"
          echo "data.json count under data/:"
          find data -type f -name data.json | wc -l
          echo "Some sample files under text-versions:"
          find data -type f -path "*/bills/*/*/text-versions/*/*" | sed -n '1,30p' || true

      - name: Quick Debug
        run: |
          set -euo pipefail
          echo "Total data.json files under data/: $(find data -type f -name data.json | wc -l || true)"
          echo "Sample text-version data.json (data/*/bills/*/*/text-versions/*/data.json):"
          find data -type f -path "data/*/bills/*/*/text-versions/*/data.json" | sort | sed -n '1,100p' || true

      - name: Build Bill Text
        run: |
          set -euo pipefail
          echo "Running latest-bill-text via $PYTHON"
          $PYTHON -u scripts/latest-bill-text.py

      - name: Debug Bill Text
        run: |
          set -euo pipefail
          echo "latest_billtext exists?"; [ -d latest_billtext ] && echo "yes" || echo "no"
          echo "latest_billtext data.json count:"; find latest_billtext -type f -name data.json | wc -l || true
          echo "Sample latest_billtext files (up to 200):"
          find latest_billtext -type f -name data.json | sort | sed -n '1,200p' || true

      - name: Build manifests
        run: |
          set -euo pipefail
          echo "Running build_manifests.py via $PYTHON"
          $PYTHON -u scripts/build_manifests.py

      - name: Manifest sanity checks
        run: |
          set -euo pipefail
          if [ ! -f billtext-manifest.json ]; then
            echo "::error:: billtext-manifest.json not found; aborting"
            exit 1
          fi
          BILLCOUNT=$(jq '.files | length' billtext-manifest.json 2>/dev/null || echo 0)
          echo "billtext-manifest.json contains ${BILLCOUNT} entries"
          if [ "${BILLCOUNT}" -lt 1 ]; then
            echo "::error:: billtext-manifest.json is empty; aborting upload (safety)"
            exit 1
          fi

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          version: '>= 472.0.0'

      - name: Ensure GCS bucket exists
        run: |
          set -euo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null 2>&1 || gsutil mb -p "${GCP_PROJECT}" "gs://${GCS_BUCKET}"

      - name: Upload Bill Text to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          TARGET_PREFIX="${PREFIX:+${PREFIX}/}data"
          echo "Uploading latest_billtext -> gs://${GCS_BUCKET}/${TARGET_PREFIX}/ (non-destructive rsync)"
          gsutil -m rsync -r "latest_billtext" "gs://${GCS_BUCKET}/${TARGET_PREFIX}/"

      - name: Upload manifest to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          GS_PREFIX="${PREFIX:+${PREFIX}/}manifests"
          echo "Uploading manifest file to gs://${GCS_BUCKET}/${GS_PREFIX}/"
          gsutil -m cp -n billtext-manifest.json "gs://${GCS_BUCKET}/${GS_PREFIX}/" || { echo "::warning:: manifest upload may have failed"; }

      - name: Summary
        run: |
          set -euo pipefail
          COUNT_TEXT=$(find latest_billtext -type f -name data.json 2>/dev/null | wc -l || echo 0)
          echo "Completed billtext run."
          echo "latest_billtext JSON count: ${COUNT_TEXT}"
          echo "Bucket: ${GCS_BUCKET}"
          echo "Prefix: ${GCS_PREFIX}"
