name: Collect Congress Bill Text (119)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 9 * * *" # nightly (09:30 UTC)

concurrency:
  group: collect-congress-billtext
  cancel-in-progress: true

permissions:
  contents: read

env:
  CONGRESSES: ${{ secrets.CONGRESSES || '119' }}
  GCS_BUCKET: ${{ secrets.GCS_BUCKET || 'congress-legislative-data' }}
  GCS_PREFIX: ${{ secrets.GCS_PREFIX || 'congress-billtext-data' }}
  GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

jobs:
  collect_billtext:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install System Libs
        run: |
          sudo apt-get update -y
          sudo apt-get install -y python3-venv jq zip unzip rsync wget

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          version: '>= 472.0.0'

      - name: Restore previous data from GCS
        run: |
          set -euo pipefail
          mkdir -p data/119
          PREFIX="${GCS_PREFIX%/}"
          TARGET_PREFIX="${PREFIX:+${PREFIX}/}data/119"
          echo "Restoring existing bill data from gs://${GCS_BUCKET}/${TARGET_PREFIX}"
          gsutil -m rsync -r "gs://${GCS_BUCKET}/${TARGET_PREFIX}" "data/119" || true

      - name: Download bulkdata from GovInfo
        run: |
          set -euo pipefail
          mkdir -p data/119
          wget --mirror --no-parent --no-host-directories \
            --cut-dirs=3 \
            --accept '*.xml,*.mods,*.zip' \
            -P data/119 \
            https://www.govinfo.gov/bulkdata/BILLS/119/
          echo "Sample downloaded files:"
          find data/119 -type f -print | head -n 30 || true

      - name: Normalize bulkdata into bills/ tree
        run: |
          set -euo pipefail
          mkdir -p data/119/bills
          for bt in hr s hjres sjres hconres sconres hres sres; do
            if [ -d "data/119/1/$bt" ]; then
              rsync -a "data/119/1/$bt/" "data/119/bills/$bt/"
            fi
          done
          echo "Normalized bills tree:"
          find data/119/bills -maxdepth 3 | head -n 50

      - name: Unzip billtext packages
        run: |
          set -euo pipefail
          echo "Unzipping any package.zip files under data/ ..."
          found=0
          find data -type f -name 'package.zip' -print0 | while IFS= read -r -d '' zipfile; do
            found=1
            dir="$(dirname "$zipfile")"
            echo "Extracting: $zipfile -> $dir"
            if unzip -o "$zipfile" -d "$dir"; then
              echo "OK: $zipfile extracted"
            else
              echo "::warning:: Failed to extract $zipfile â€” continuing"
            fi
          done
          if [ "$found" -eq 0 ]; then
            echo "No package.zip files found (may be okay if upstream writes directly)."
          fi

      - name: Quick Debug
        run: |
          echo "Total data.json files under data/: $(find data -type f -name data.json | wc -l || true)"
          echo "Sample text-version data.json files:"
          find data -type f -path "data/*/bills/*/*/text-versions/*/data.json" | sort | head -n 20 || true

      - name: Build Latest Bill Text
        run: |
          python -m venv env
          . env/bin/activate
          python -m pip install --upgrade pip
          python -m pip install -e .
          $PYTHON -u scripts/latest-bill-text.py

      - name: Build manifests
        run: |
          . env/bin/activate
          $PYTHON -u scripts/build_manifests.py

      - name: Manifest sanity checks
        run: |
          if [ ! -f billtext-manifest.json ]; then
            echo "::error:: billtext-manifest.json not found; aborting"
            exit 1
          fi
          BILLCOUNT=$(jq '.files | length' billtext-manifest.json 2>/dev/null || echo 0)
          echo "billtext-manifest.json contains ${BILLCOUNT} entries"
          if [ "${BILLCOUNT}" -lt 1 ]; then
            echo "::error:: billtext-manifest.json is empty; aborting upload"
            exit 1
          fi

      - name: Upload Bill Text to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          TARGET_PREFIX="${PREFIX:+${PREFIX}/}data"
          echo "Uploading normalized bill data -> gs://${GCS_BUCKET}/${TARGET_PREFIX}/"
          gsutil -m rsync -r "data/119" "gs://${GCS_BUCKET}/${TARGET_PREFIX}/119"

      - name: Upload manifest to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          GS_PREFIX="${PREFIX:+${PREFIX}/}manifests"
          echo "Uploading manifest to gs://${GCS_BUCKET}/${GS_PREFIX}/"
          gsutil -m cp -n billtext-manifest.json "gs://${GCS_BUCKET}/${GS_PREFIX}/" || true

      - name: Summary
        run: |
          COUNT_TEXT=$(find latest_billtext -type f -name data.json 2>/dev/null | wc -l || echo 0)
          echo "Completed bulk billtext sync"
          echo "latest_billtext JSON count: ${COUNT_TEXT}"
          echo "Bucket: ${GCS_BUCKET}"
          echo "Prefix: ${GCS_PREFIX}/data/119"
          echo "Manifest: billtext-manifest.json"
          jq '.file_count' billtext-manifest.json || true
