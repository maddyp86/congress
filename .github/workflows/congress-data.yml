name: Collect Congress Data (118–119)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "30 9 * * *" # nightly (09:30 UTC)
    - cron: "0 10 * * 0" # weekly full refresh (Sunday 10:00 UTC)

concurrency:
  group: collect-congress-data
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  collect_and_publish:
    runs-on: ubuntu-latest

    env:
      CONGRESSES: ${{ secrets.CONGRESSES || '118,119' }}
      SESSIONS: ${{ secrets.SESSIONS || '118.2023,118.2024,119.2025' }}
      GCS_BUCKET: ${{ secrets.GCS_BUCKET || 'congress-bill-data' }}
      GCS_PREFIX: ${{ secrets.GCS_PREFIX || 'congress-data' }}
      MAKE_PUBLIC: ${{ secrets.MAKE_PUBLIC || 'false' }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install system libs
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y python3-venv jq zip

      # ==== Python setup + pip cache + install congress tool (usc-run) ====
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt', 'pyproject.toml', 'setup.cfg', 'setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install congress tool from GitHub (usc-run)
        run: |
          set -euo pipefail
          python -m venv env
          . env/bin/activate
          python -m pip install --upgrade pip
          pip install "git+https://github.com/unitedstates/congress.git"

      - name: Verify required env
        run: |
          set -euo pipefail
          : "${GCP_PROJECT:?Missing required secret GCP_PROJECT}"
          : "${GCS_BUCKET:?Missing required GCS_BUCKET}"
          test -n "${{ secrets.GCP_SA_KEY }}" || { echo "Missing required secret GCP_SA_KEY"; exit 1; }

      - name: Ensure data dir
        run: mkdir -p data

      # === VOTES ===
      - name: Run votes scraper
        env:
          SESSIONS: ${{ env.SESSIONS }}
        run: |
          set -euo pipefail
          . env/bin/activate
          if [ "${{ github.event.schedule }}" = "30 9 * * *" ]; then
            usc-run votes --sessions="${SESSIONS}" --fast --log=info
          else
            usc-run votes --sessions="${SESSIONS}" --log=info
          fi

      - name: Quick votes debug
        run: |
          set -euo pipefail
          echo "Votes files (sample):"
          { find data -type f -path "*/votes/*/*/data.json" | sort | sed 's/^/  /' | head -n 100; } 2>/dev/null || true

      # === BILLS (govinfo -> process) ===
      - name: Fetch GovInfo BILLSTATUS
        run: |
          set -euo pipefail
          . env/bin/activate
          usc-run govinfo --bulkdata=BILLSTATUS --congress="${CONGRESSES}"

      - name: Process bills
        run: |
          set -euo pipefail
          . env/bin/activate
          usc-run bills

      - name: Quick bills debug
        run: |
          set -euo pipefail
          echo "Bill metadata files (sample):"
          { find data -type f -path "*/bills/*/data.json" | sort | sed 's/^/  /' | head -n 100; } 2>/dev/null || true

      # === BILL TEXT ===
      - name: Fetch GovInfo Bill Text
        run: |
          set -euo pipefail
          . env/bin/activate
          IFS=',' read -ra CONS <<< "${CONGRESSES}"
          for C in "${CONS[@]}"; do
            C="$(echo "$C" | xargs)"  # trim spaces
            echo "Fetching BILLS text for Congress $C"
            usc-run govinfo --collections=BILLS --congress="$C" --store=mods,xml,text --bulkdata=False
          done
          usc-run billtext

      - name: Quick Bill Text Debug
        run: |
          set -euo pipefail
          echo "Bill text (text-version data.json) sample:"
          { find data -type f -path "*/bills/*/text-versions/*/data.json" | sort | sed 's/^/  /' | head -n 100; } 2>/dev/null || true

      # === Build latest_billtext export via repo script ===
      - name: Build Latest Bill Text
        run: |
          set -euo pipefail
          . env/bin/activate
          python scripts/latest-bill-text.py

      # === Manifests (local + GCS URLs) via repo script ===
      - name: Build Manifests
        run: |
          set -euo pipefail
          . env/bin/activate
          python scripts/build_manifests.py

      - name: Quick Manifest Counts
        run: |
          set -euo pipefail
          echo "Votes files: $(jq '.files | length' votes-manifest.json || echo 0)"
          echo "Bills files: $(jq '.files | length' bills-manifest.json || echo 0)"
          echo "BillText files: $(jq '.files | length' billtext-manifest.json || echo 0)"

      # === GCP auth + upload ===
      - name: Authenticate to GCP (service account)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Gcloud (sets project)
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
          version: '>= 472.0.0'

      - name: Ensure Bucket Exists
        run: |
          set -euo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null 2>&1 || gsutil mb -p "${GCP_PROJECT}" "gs://${GCS_BUCKET}"

      - name: Upload Congress Data to GCS
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"

          # Full tree: ALL bills, ALL bill text versions, and ALL votes
          echo "Sync full data -> gs://${GCS_BUCKET}/${PREFIX}/data/"
          gsutil -m rsync -r -d data "gs://${GCS_BUCKET}/${PREFIX}/data"

          # Convenience “latest” folder (bill text only)
          if [ -d latest_billtext ]; then
            echo "Uploading latest_billtext -> gs://${GCS_BUCKET}/${PREFIX}/latest/billtext/"
            gsutil -m cp -r latest_billtext/* "gs://${GCS_BUCKET}/${PREFIX}/latest/billtext/"
          fi

          echo "Uploading manifests -> gs://${GCS_BUCKET}/${PREFIX}/"
          gsutil cp votes-manifest.json votes-manifest-gcs.json \
                   bills-manifest.json bills-manifest-gcs.json \
                   billtext-manifest.json billtext-manifest-gcs.json \
                   "gs://${GCS_BUCKET}/${PREFIX}/" || true

      - name: Summary
        run: |
          set -euo pipefail
          COUNT_TEXT=$(find latest_billtext -type f -name data.json 2>/dev/null | wc -l || true)
          echo "Uploaded bucket: ${GCS_BUCKET}"
          echo "Prefix: ${GCS_PREFIX}"
          echo "latest_billtext count: ${COUNT_TEXT}"
