name: Collect Bill & Vote Data (118-119)

on:
  schedule:
    # Nightly at 09:30 UTC = 02:30 PT
    - cron: "30 9 * * *"
    # Weekly full refresh, Sundays 03:00 PT
    - cron: "00 10 * * 0"
  workflow_dispatch:

concurrency:
  group: collect-congress-data
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  collect_and_publish:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system libs
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y wget python3-dev libxml2-dev libxslt1-dev libz-dev python3-venv jq zip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          # adjust if you use requirements.txt / pyproject.toml instead of setup.py
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py','**/requirements.txt','**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install congress tool (editable)
        run: |
          set -euo pipefail
          python -m venv env
          . env/bin/activate
          pip install --upgrade pip setuptools wheel
          pip install -e .

      - name: Debug Python env (optional — helpful if problems)
        run: |
          set -euo pipefail
          . env/bin/activate
          echo "Python version: $(python -V)"
          python -c "import sys; print('sys.path (first 10):', sys.path[:10])"
          python -m pip list
          python - <<'PY'
try:
    import utils
    import inspect
    print("utils module found at:", inspect.getsourcefile(utils))
except Exception:
    import traceback
    traceback.print_exc()
PY

      - name: Configure env vars (from secrets or defaults)
        run: |
          set -euo pipefail
          # Set defaults here; override by repo secrets if present
          if [ -n "${{ secrets.CONGRESSES }}" ]; then
            echo "CONGRESSES=${{ secrets.CONGRESSES }}" >> $GITHUB_ENV
          else
            echo "CONGRESSES=118,119" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.SESSIONS }}" ]; then
            echo "SESSIONS=${{ secrets.SESSIONS }}" >> $GITHUB_ENV
          else
            echo "SESSIONS=118.2023,118.2024,119.2025" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.GCS_BUCKET }}" ]; then
            echo "GCS_BUCKET=${{ secrets.GCS_BUCKET }}" >> $GITHUB_ENV
          else
            echo "GCS_BUCKET=congress-bill-data" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.GCS_PREFIX }}" ]; then
            echo "GCS_PREFIX=${{ secrets.GCS_PREFIX }}" >> $GITHUB_ENV
          else
            echo "GCS_PREFIX=congress-data" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.MAKE_PUBLIC }}" ]; then
            echo "MAKE_PUBLIC=${{ secrets.MAKE_PUBLIC }}" >> $GITHUB_ENV
          else
            echo "MAKE_PUBLIC=false" >> $GITHUB_ENV
          fi

          if [ -n "${{ secrets.GCP_PROJECT }}" ]; then
            echo "GCP_PROJECT=${{ secrets.GCP_PROJECT }}" >> $GITHUB_ENV
          else
            echo "::error::Missing GCP_PROJECT secret; set it in repo secrets."
            exit 1
          fi

      - name: Ensure data dir
        run: mkdir -p data

      # === VOTES ===
      - name: Run votes scraper (sessions)
        env:
          SESSIONS: ${{ env.SESSIONS }}
        run: |
          set -euo pipefail
          . env/bin/activate
          echo "Running votes scraper for SESSIONS=${SESSIONS}"
          usc-run votes --sessions="${SESSIONS}" --log=info

      - name: List scraped vote files (debug)
        run: |
          set -euo pipefail
          echo "Listing vote JSON files…"
          find data -type f -path "*/votes/*/*/data.json" | sort | sed 's/^/  /' | head -n 200 || true

      # === BILLS ===
      - name: Fetch GovInfo BILLSTATUS (congresses)
        run: |
          set -euo pipefail
          . env/bin/activate
          echo "Fetching govinfo BILLSTATUS for: ${CONGRESSES}"
          usc-run govinfo --bulkdata=BILLSTATUS --congress=${CONGRESSES} --log=info

      - name: Process Bills (congresses)
        run: |
          set -euo pipefail
          . env/bin/activate
          echo "Processing bills for congresses: ${CONGRESSES}"
          usc-run bills --congress=${CONGRESSES} --log=info

      - name: Fetch Bill Text (congresses)
        run: |
          set -euo pipefail
          . env/bin/activate
          echo "Processing bill text for congresses: ${CONGRESSES}"
          usc-run billtext --congress=${CONGRESSES} --log=info

      - name: List scraped bill files (debug)
        run: |
          set -euo pipefail
          echo "Listing some bill metadata files…"
          find data -type f -path "*/bills/*/data.json" | sort | sed 's/^/  /' | head -n 200 || true
          echo "Listing some bill text files…"
          find data -type f -path "*/bills/*/text-versions/*/data.json" | sort | sed 's/^/  /' | head -n 200 || true

      # === MANIFESTS (robust JSON, local + HTTPS GCS variants) ===
      - name: Build manifests (votes, bills, billtext) - robust (fixed)
  env:
    GCS_BUCKET: ${{ env.GCS_BUCKET }}
    GCS_PREFIX: ${{ env.GCS_PREFIX }}
  run: |
    set -euo pipefail
    . env/bin/activate
    python - <<'PY'
import json, pathlib, os
base = pathlib.Path("data")
bucket = os.environ.get("GCS_BUCKET", "").rstrip("/")
prefix = os.environ.get("GCS_PREFIX", "").strip("/")

def gather(glob):
    # returns list of paths as POSIX strings relative to repo root (include leading 'data/')
    files = sorted(str(p).replace("\\\\","/") for p in base.glob(glob) if p.is_file())
    return files

manifests = {
  "votes-manifest.json": gather("**/votes/*/*/data.json"),
  "bills-manifest.json": gather("**/bills/*/data.json"),
  "billtext-manifest.json": gather("**/bills/*/text-versions/*/data.json"),
}

for name, files in manifests.items():
    # write local-path manifest (safe JSON-escaped)
    with open(name, "w") as fh:
        json.dump({"files": files}, fh)
    print(f"{name} built: {len(files)} files")

    # build GCS HTTPS manifest: remove leading "data/" because we sync local 'data' into gs://.../<prefix>/data/
    gcs_list = []
    for f in files:
        # f looks like 'data/119/bills/.../data.json' -> drop the leading 'data/' to get '119/bills/.../data.json'
        rel = f
        if rel.startswith("data/"):
            rel = rel[len("data/"):]
        if bucket and prefix:
            url = f"https://storage.googleapis.com/{bucket}/{prefix}/data/{rel}"
        elif bucket:
            url = f"https://storage.googleapis.com/{bucket}/{rel}"
        else:
            url = ""
        gcs_list.append(url)
    gcs_name = name.replace(".json","-gcs.json")
    with open(gcs_name, "w") as fh:
        json.dump({"files": gcs_list}, fh)
    print(f"{gcs_name} built: {len(gcs_list)} files")
PY

      - name: Quick manifest counts (debug)
        run: |
          set -euo pipefail
          echo "Votes files: $(jq '.files | length' votes-manifest.json || echo 0)"
          echo "Bills files: $(jq '.files | length' bills-manifest.json || echo 0)"
          echo "BillText files: $(jq '.files | length' billtext-manifest.json || echo 0)"

      # === GCP auth & upload ===
      # DEFAULT AUTH (JSON key) - unchanged from your original flow.
      - name: Setup gcloud (service account - JSON key)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      # ALTERNATIVE AUTH (OIDC / Workload Identity Federation) - uncomment this block and remove the JSON-key step above
      # - id: 'auth'
      #   uses: 'google-github-actions/auth@v1'
      #   with:
      #     workload_identity_provider: 'projects/PROJECT_NUMBER/locations/global/workloadIdentityPools/POOL_ID/providers/PROVIDER_ID'
      #     service_account: 'github-actions-sa@PROJECT_ID.iam.gserviceaccount.com'
      #
      # - name: Setup gcloud (via OIDC)
      #   uses: google-github-actions/setup-gcloud@v1
      #   with:
      #     project_id: ${{ env.GCP_PROJECT }}

      - name: Ensure bucket exists
        run: |
          set -euo pipefail
          # create bucket if missing (requires project-level permissions)
          gsutil ls -b gs://${GCS_BUCKET} >/dev/null 2>&1 || gsutil mb -p "${GCP_PROJECT}" gs://${GCS_BUCKET}

      - name: Upload data tree to GCS (preserve paths / incremental)
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          DEST="gs://${GCS_BUCKET}/${PREFIX}/data/"
          echo "Syncing data/ -> ${DEST}"
          # Use rsync to copy only changed/new files (faster, incremental)
          gsutil -m rsync -r data "${DEST}"
          echo "Uploading manifests (local and GCS variants)"
          gsutil cp votes-manifest.json votes-manifest-gcs.json bills-manifest.json bills-manifest-gcs.json billtext-manifest.json billtext-manifest-gcs.json gs://${GCS_BUCKET}/${PREFIX}/

      - name: (optional) Make uploaded objects public (convenience)
        if: ${{ env.MAKE_PUBLIC == 'true' }}
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          echo "Setting public-read on uploaded objects under gs://${GCS_BUCKET}/${PREFIX}"
          # Recommended: use IAM (works with Uniform bucket-level access)
          gsutil iam ch allUsers:roles/storage.objectViewer gs://${GCS_BUCKET}
          # Older ACL approach (may fail if uniform bucket-level access is enabled):
          # gsutil -m acl ch -r -u AllUsers:R gs://${GCS_BUCKET}/${PREFIX}/

      - name: Print summary (sample public URL if public)
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          echo "Uploaded to gs://${GCS_BUCKET}/${PREFIX}/"
          if [ "${MAKE_PUBLIC}" = "true" ]; then
            echo "Sample public URL (bill): https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/data/119/bills/sjres55/data.json"
            echo "Sample public URL (vote): https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/data/119/votes/<session>/<vote>/data.json"
          else
            echo "Bucket is private; n8n must use GCS credentials to fetch single objects."
          fi
