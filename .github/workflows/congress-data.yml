name: Collect Congress Data (118-119)

on:
  schedule:
    - cron: "30 9 * * *"
    - cron: "00 10 * * 0"
  workflow_dispatch: {}

concurrency:
  group: collect-congress-data
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  collect:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system libs
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y wget python3-dev libxml2-dev libxslt1-dev libz-dev python3-venv jq zip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install congress tool from GitHub (usc-run)
        run: |
          set -euo pipefail
          python -m venv env
          . env/bin/activate
          pip install --upgrade pip
          pip install "git+https://github.com/unitedstates/congress.git"

      - name: Configure env vars (from secrets or defaults)
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.CONGRESSES }}" ]; then
            echo "CONGRESSES=${{ secrets.CONGRESSES }}" >> $GITHUB_ENV
          else
            echo "CONGRESSES=118,119" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.SESSIONS }}" ]; then
            echo "SESSIONS=${{ secrets.SESSIONS }}" >> $GITHUB_ENV
          else
            echo "SESSIONS=118.2023,118.2024,119.2025" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.GCS_BUCKET }}" ]; then
            echo "GCS_BUCKET=${{ secrets.GCS_BUCKET }}" >> $GITHUB_ENV
          else
            echo "GCS_BUCKET=congress-bill-data" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.GCS_PREFIX }}" ]; then
            echo "GCS_PREFIX=${{ secrets.GCS_PREFIX }}" >> $GITHUB_ENV
          else
            echo "GCS_PREFIX=congress-data" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.MAKE_PUBLIC }}" ]; then
            echo "MAKE_PUBLIC=${{ secrets.MAKE_PUBLIC }}" >> $GITHUB_ENV
          else
            echo "MAKE_PUBLIC=false" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.GCP_PROJECT }}" ]; then
            echo "GCP_PROJECT=${{ secrets.GCP_PROJECT }}" >> $GITHUB_ENV
          else
            echo "::error::Missing GCP_PROJECT secret; set it in repo secrets."
            exit 1
          fi

      - name: Ensure data dir
        run: mkdir -p data

      - name: Decide votes mode (--fast vs full)
        id: votes_mode
        run: |
          set -euo pipefail
          if [ "${{ github.event_name }}" = "schedule" ]; then
            DOW_HOUR="$(date -u '+%w %H')"
            if [ "$DOW_HOUR" = "0 10" ]; then
              echo "mode=full" >> $GITHUB_OUTPUT
            else
              echo "mode=fast" >> $GITHUB_OUTPUT
            fi
          else
            echo "mode=full" >> $GITHUB_OUTPUT
          fi

      - name: Run votes scraper (sessions)
        env:
          SESSIONS: ${{ env.SESSIONS }}
        run: |
          set -euo pipefail
          . env/bin/activate
          echo "Running votes scraper for SESSIONS=${SESSIONS}"
          if [ "${{ steps.votes_mode.outputs.mode }}" = "fast" ]; then
            usc-run votes --sessions="${SESSIONS}" --fast --log=info
          else
            usc-run votes --sessions="${SESSIONS}" --log=info
          fi

      - name: List scraped vote files (debug)
        run: |
          set -euo pipefail
          find data -type f -path "*/votes/*/*/data.json" | sort | sed 's/^/  /' | head -n 200 || true

      - name: Validate vote files exist (warn/fail)
        run: |
          set -euo pipefail
          COUNT=$(find data -type f -path "*/votes/*/*/data.json" | wc -l | tr -d ' ')
          echo "Found $COUNT vote JSON files"
          if [ "$COUNT" -eq 0 ]; then
            echo "::error::No vote JSON files were generated. Check sessions or network."
            exit 1
          fi

      - name: Fetch GovInfo BILLSTATUS
        run: |
          set -euo pipefail
          . env/bin/activate
          usc-run govinfo --bulkdata=BILLSTATUS --congress=${CONGRESSES} --log=info

      - name: Process Bills
        run: |
          set -euo pipefail
          . env/bin/activate
          usc-run bills --congress=${CONGRESSES} --log=info

      - name: Fetch Bill Text
        run: |
          set -euo pipefail
          . env/bin/activate
          usc-run billtext --congress=${CONGRESSES} --log=info

      - name: List scraped bill files (debug)
        run: |
          set -euo pipefail
          find data -type f -path "*/bills/*/data.json" | sort | sed 's/^/  /' | head -n 200 || true
          find data -type f -path "*/bills/*/text-versions/*/data.json" | sort | sed 's/^/  /' | head -n 200 || true

      - name: Build manifests (script)
        env:
          GCS_BUCKET: ${{ env.GCS_BUCKET }}
          GCS_PREFIX: ${{ env.GCS_PREFIX }}
        run: |
          set -euo pipefail
          . env/bin/activate
          # run script that builds both local manifests and the -gcs.json HTTPS manifests
          python scripts/build_manifests.py

      - name: Quick manifest counts (debug)
        run: |
          set -euo pipefail
          echo "Votes files: $(jq '.files | length' votes-manifest.json || echo 0)"
          echo "Bills files: $(jq '.files | length' bills-manifest.json || echo 0)"
          echo "BillText files: $(jq '.files | length' billtext-manifest.json || echo 0)"

      - name: Setup gcloud (service account - JSON key)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Ensure bucket exists
        run: |
          set -euo pipefail
          gsutil ls -b "gs://${GCS_BUCKET}" >/dev/null 2>&1 || gsutil mb -p "${GCP_PROJECT}" "gs://${GCS_BUCKET}"

      - name: Upload data tree to GCS (preserve paths / incremental)
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          DEST="gs://${GCS_BUCKET}/${PREFIX}/data/"
          gsutil -m rsync -r data "${DEST}"
          gsutil cp votes-manifest.json votes-manifest-gcs.json bills-manifest.json bills-manifest-gcs.json billtext-manifest.json billtext-manifest-gcs.json "gs://${GCS_BUCKET}/${PREFIX}/"
          mkdir -p out
          zip -r out/congress-data.zip data votes-manifest.json bills-manifest.json billtext-manifest.json
          gsutil cp out/congress-data.zip "gs://${GCS_BUCKET}/${PREFIX}/congress-data.zip"

      - name: (optional) Make uploaded objects public (convenience)
        if: ${{ env.MAKE_PUBLIC == 'true' }}
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          gsutil iam ch allUsers:roles/storage.objectViewer "gs://${GCS_BUCKET}"

      - name: Verify sample GCS objects exist (warn/fail)
        run: |
          set -euo pipefail
          SAMPLES=(
            "gs://${GCS_BUCKET}/${GCS_PREFIX}/data/119/bills/sjres55/data.json"
            "gs://${GCS_BUCKET}/${GCS_PREFIX}/data/119/votes/119-1/vote_119_1_00499/data.json"
            "gs://${GCS_BUCKET}/${GCS_PREFIX}/congress-data.zip"
          )
          MISSING=0
          for s in "${SAMPLES[@]}"; do
            if gsutil -q stat "$s"; then
              echo "OK: $s"
            else
              echo "::warning::Missing (or inaccessible) object: $s"
              MISSING=1
            fi
          done
          if [ "$MISSING" -ne 0 ]; then
            echo "::warning::One or more sample objects are missing from GCS (see above)."

      - name: Print summary (sample public URL if public)
        run: |
          set -euo pipefail
          PREFIX="${GCS_PREFIX%/}"
          echo "Uploaded to gs://${GCS_BUCKET}/${PREFIX}/"
          if [ "${MAKE_PUBLIC}" = "true" ]; then
            echo "Public example: https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/data/119/bills/sjres55/data.json"
            echo "Archive: https://storage.googleapis.com/${GCS_BUCKET}/${PREFIX}/congress-data.zip"
          else
            echo "Bucket is private; consumers must use GCS credentials or signed URLs to access objects."
