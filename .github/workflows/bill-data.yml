name: Collect Bill Data (118-119)

on:
  workflow_dispatch:
    inputs:
      bill_id:
        description: 'Comma-separated bill ids in repo format only (e.g. sjres57-118, hr5009-118). MUST be type+number-congress.'
        required: true
      artifact_prefix:
        description: 'artifact prefix (defaults filtered-bills)'
        required: false
        default: 'filtered-bills'
      ref_branch:
        description: 'branch/ref to run against (default main)'
        required: false
        default: 'main'

permissions:
  contents: read
  actions: write

jobs:
  package:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system libs
        run: |
          sudo apt-get update
          sudo apt-get install -y wget python3-dev libxml2-dev libxslt1-dev libz-dev python3-venv jq zip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install package + deps
        run: |
          python -m venv env
          . env/bin/activate
          pip install --upgrade pip
          pip install .

      - name: Configure inputs
        run: |
          echo "BILL_ID=${{ github.event.inputs.bill_id }}" >> $GITHUB_ENV
          echo "ART_PREFIX=${{ github.event.inputs.artifact_prefix }}" >> $GITHUB_ENV

      - name: Ensure data and selected_files exist
        run: |
          mkdir -p data selected_files

      - name: Process bill_ids (repo-format only) with per-congress govinfo fallback
        id: process_bills
        run: |
          set -euo pipefail

          # BILL_ID expected like: "sjres57-118,hr5009-118"
          IFS=',' read -ra RAW_KEYS <<< "${BILL_ID}"

          CLEAN_KEYS=()
          for raw in "${RAW_KEYS[@]}"; do
            token="$(echo "${raw}" | tr -d '[:space:]' | tr -d '.' | tr '[:upper:]' '[:lower:]')"
            [ -z "$token" ] && continue
            # only accept repo-style: letters+digits-hyphen-congress (e.g., sjres57-118)
            if echo "$token" | grep -qE '^[a-z]+[0-9]+-[0-9]+$'; then
              CLEAN_KEYS+=("$token")
            else
              echo "::warning::Skipping malformed bill_id (not repo-format): '${raw}' -> normalized '${token}'"
            fi
          done

          if [ ${#CLEAN_KEYS[@]} -eq 0 ]; then
            echo "::error::No valid repo-format bill_id values found; exiting."
            exit 1
          fi

          echo "Repo-format bill_id list to process:"
          for k in "${CLEAN_KEYS[@]}"; do echo "  $k"; done

          declare -A GOVINFO_FETCHED
          . env/bin/activate

          for k in "${CLEAN_KEYS[@]}"; do
            echo "=== Processing bill: $k ==="
            # Extract congress: token like "sjres57-118" -> congress is after last '-'
            congress="$(echo "$k" | sed -E 's/.*-([0-9]+)$/\1/')"
            left="$(echo "$k" | sed -E 's/-[0-9]+$//')"   # e.g. "sjres57"
            type="$(echo "$left" | sed -E 's/^([a-z]+).*$/\1/')"   # e.g. "sjres"
            number="$(echo "$left" | sed -E 's/^[a-z]+([0-9]+).*$/\1/')" # e.g. "57"

            # Attempt to run bills for this repo-style bill_id (pass as-is)
            if ./run bills --bill_id="$k" --log=info; then
              echo "bills succeeded for $k"
            else
              echo "::warning::'./run bills' failed for $k - attempting govinfo fetch for congress ${congress} and retry"

              if [ -z "${GOVINFO_FETCHED[$congress]+x}" ]; then
                echo "Fetching govinfo BILLSTATUS for congress ${congress}..."
                if ./run govinfo --bulkdata=BILLSTATUS --congress="${congress}" --log=info; then
                  GOVINFO_FETCHED[$congress]=1
                  echo "govinfo fetch succeeded for congress ${congress}"
                else
                  GOVINFO_FETCHED[$congress]=0
                  echo "::warning::govinfo fetch failed for congress ${congress}; bills for this congress may still fail"
                fi
              else
                echo "govinfo already attempted for congress ${congress} (status: ${GOVINFO_FETCHED[$congress]})"
              fi

              # Retry once
              if ./run bills --bill_id="$k" --log=info; then
                echo "bills succeeded on retry for $k"
              else
                echo "::warning::bills still failed for $k after govinfo retry. Continuing to next bill."
              fi
            fi

            # run billtext (best-effort)
            if ./run billtext --bill_id="$k" --log=info; then
              echo "billtext succeeded for $k"
            else
              echo "::warning::'./run billtext' failed for $k"
            fi

            # optional gentle sleep
            # sleep 0.2
          done

      - name: Collect produced files into selected_files
        run: |
          set -euo pipefail
          mkdir -p selected_files
          IFS=',' read -ra RAW_KEYS <<< "${BILL_ID}"
          for raw in "${RAW_KEYS[@]}"; do
            token="$(echo "${raw}" | tr -d '[:space:]' | tr -d '.' | tr '[:upper:]' '[:lower:]')"
            [ -z "$token" ] && continue
            if ! echo "$token" | grep -qE '^[a-z]+[0-9]+-[0-9]+$'; then
              continue
            fi

            congress="$(echo "$token" | sed -E 's/.*-([0-9]+)$/\1/')"
            left="$(echo "$token" | sed -E 's/-[0-9]+$//')"
            type="$(echo "$left" | sed -E 's/^([a-z]+).*$/\1/')"
            number="$(echo "$left" | sed -E 's/^[a-z]+([0-9]+).*$/\1/')"

            meta="data/${congress}/bills/${type}${number}/data.json"
            if [ -f "$meta" ]; then
              cp --parents "$meta" selected_files/
            fi

            find data -type f -path "*/bills/${type}${number}/text-versions/*/data.json" -print0 \
              | xargs -0 -I{} cp --parents "{}" selected_files/ || true
          done

          echo "Requested bill_id(s): ${BILL_ID}"
          echo "Selected files (first 500 lines):"
          find selected_files -type f | sed 's/^/  /' | head -n 500 || true

      - name: Create zip and set output artifact_file
        id: makezip
        run: |
          set -euo pipefail
          timestamp=$(date -u "+%Y%m%dT%H%M%SZ")
          outname="${ART_PREFIX}-${timestamp}-${GITHUB_RUN_ID}.zip"

          filecount=0
          if [ -d selected_files ]; then
            filecount=$(find selected_files -type f | wc -l || true)
          fi

          if [ "$filecount" -gt 0 ]; then
            echo "Creating zip with ${filecount} files..."
            (cd selected_files && zip -r "../${outname}" .)
          else
            echo "No files found for requested bill_id; creating an empty zip"
            tmpfile="$(mktemp)"
            printf '' > "${tmpfile}"
            zip -q "${outname}" "${tmpfile}"
            rm -f "${tmpfile}"
          fi

          echo "artifact_file=${outname}" >> $GITHUB_OUTPUT
          ls -lh "${outname}"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: filtered-bills
          path: ${{ steps.makezip.outputs.artifact_file }}
          retention-days: 7
